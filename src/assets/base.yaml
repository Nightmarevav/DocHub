# Правила контроля целостности DocHub
rules:
  validators:
    dochub:
      title: DocHub
    dochub.metamodel:
      title: Контроль ядра метамодели
    dochub.metamodel.contexts:
      title: Контроль целостности контекстов
    dochub.metamodel.contexts.no_found_component:
      title: Несуществующие компоненты
      source: >
        ([(  
          $MANIFEST := $;
          contexts.$spread().(                      
            $CONTEXT_ID := $keys()[0];
            *.components.
              {                   
                "contextID": $CONTEXT_ID,
                "componentID": $
              };
          )[$ and $not($substring(componentID, -2) = ".*") and $not($exists($lookup($MANIFEST.components, componentID)))]
        ).{
            "uid": "$dh-mm-nfc-" & contextID & "-" & componentID,
            "correction": "Определите компонент или удалите ссылку на него в контексте",
            "description": "Возможно компонент [" & componentID & "] не описан или описан в подключаемой 
            кодовой базе архитектуры, которая сейчас недоступна.",
            "location": "/architect/contexts/" & contextID
        }])
    dochub.metamodel.contexts.outof:
      title: Компоненты вне контекста
      source: >
        (
          $MANIFEST := $;
          $USED := $distinct(contexts.*.components);
          [components.$spread().(
              $ID := $keys()[0];
              {
                  "id" : $ID,
                  "mask" : $USED[$wcard($ID, $)]
              }
          )[$not($exists(mask))].{
            "uid": "$dh-mm-ofb-" & id,
            "correction": "Добавьте компонент в контекст",
            "description": "Предполагается, что компонент не включенный в контекст не учтен.",
            "location": "/architect/components/" & id
          }]
        )
    dochub.metamodel.components:
      title: Контроль целостности компонентов
    dochub.metamodel.components.no_found_aspect:
      title: Аспект не определен
      source: >
        ([(  
          $MANIFEST := $;
          components.$spread().(                      
            $COMPONENT_ID := $keys()[0];
            *.aspects.
              {                   
                "componentID": COMPONENT_ID,
                "aspectID": $
              };
          )[$ and $not($exists($lookup($MANIFEST.aspects, aspectID)))]
        ).{
            "uid": "$dh-mm-nfa-" & contextID & "-" & componentID,
            "correction": "Определите аспект или удалите ссылку на него",
            "description": "Возможно аспект [" & aspectID & "] не описан или описан в подключаемой 
            кодовой базе архитектуры, которая сейчас недоступна.",
            "location": "/architect/spects/" & aspectID
        }])
    dochub.metamodel.components.no_define_parent:
      title: Компонент верхнего уровня не определен
      source: >
        (
            $ens := function($id) {
                (
                    $ids := $split($id, ".");
                    $join($map($ids, function($v, $i, $a) {
                            $i < $count($ids) - 1 ? $v : undefined
                    }), ".")
                )
            };

            $MANIFEST := $;

            [[$distinct(components.$spread().(
                $ens($keys()[0])
            ))[$not($exists($lookup($MANIFEST.components, $)))]].{
                "uid": "$dh-mm-cmp-ndp-" & $,
                "correction": "Опишите компонент с идентификатором [" & $ & "]",
                "description": "Предполагается, что для всех уровней компоненты определены."
            }]
        )
    dochub.metamodel.components.links:
      title: Связь компонентов
    dochub.metamodel.components.links.nofound:
      title: Связь с несуществующими компонентами
      source: >
        (
            $MANIFEST := $;
            [[components.$spread().(
                $ID := $keys()[0];
                $.*.links.{
                    "ownerID": $ID,
                    "linkID": id
                }
            )[$ and $not($exists($lookup($MANIFEST.components, linkID)))]].{
                "uid": "$dh-mm-cmp-lnk-nf-" & ownerID & "-" & linkID,
                "correction": "Определите компонент [" & linkID & "] или удалите ссылку на него",
                "description": "Возможно компонент [" & linkID & "] не описан или описан в подключаемой 
                кодовой базе архитектуры, которая сейчас недоступна.",
                "location": "/architect/components/" & ownerID
            }]
        )
    dochub.metamodel.aspects:
      title: Контроль целостности аспектов
    dochub.metamodel.aspects.no_define_parent:
      title: Аспект верхнего уровня не определен
      source: >
        (
            $ens := function($id) {
                (
                    $ids := $split($id, ".");
                    $join($map($ids, function($v, $i, $a) {
                            $i < $count($ids) - 1 ? $v : undefined
                    }), ".")
                )
            };

            $MANIFEST := $;

            [[$distinct(aspects.$spread().(
                $ens($keys()[0])
            ))[$not($exists($lookup($MANIFEST.aspects, $)))]].{
                "uid": "$dh-mm-apt-ndp-" & $,
                "correction": "Опишите аспект с идентификатором [" & $ & "]",
                "description": "Предполагается, что для всех уровней аспекты определены."
            }]
        )

# Сущности матемодели DocHub (!!!! в проектировании !!!!)
entities_: 
    # Аспекты
    aspects2:
        title: Аспекты
        description: Архитектурные аспекты
        menu: >
            (
                $append([{
                    "icon": "visibility",
                    "link": "/docs/general",
                    "location": "Аспекты"
                }], [$.aspects.$spread().{
                    "icon": *.icon,
                    "link": "/aspects/blank?id=" & $keys()[0],
                    "location": *.location
                }])[location]
            )
        presentations:          
            general:            # Дерево аспектов
                type: plantuml  # Показываем дерево аспектов в PlantUML
                template: >     # Шаблон представления дерева аспектов
                  @startwbs
                  * Аспекты
                  {{#.}}
                  {{level}} [[{{link}} {{title}}]]
                  {{/.}}
                  @endwbs
                source: >       # Данные для дерева аспектов
                  (
                    $set("rpev-id", undefined);
                    $arrleft := function($arr ,$count) {
                            $map($arr, function($v, $i) {
                        $i <= $count ? $v
                      })
                    };
                    $aspects := $.aspects;
                    $aspects.$spread().($merge([{"id" : $keys()[0]}, $.*]))^(id).(
                      $prev_nodes := $split($get("rpev-id"), ".");
                      $prev_level := $count($prev_nodes);
                      $curr_nodes := $split(id, ".");
                      $set("isdiff", false);
                      $result := $map($curr_nodes, function($v, $i) {(
                        $set("isdiff", $get("isdiff") or $prev_level = 0 or $prev_level < $i or $v != $prev_nodes[$i]) ? (
                          $id := $join($arrleft($curr_nodes, $i), ".");
                          $aspect :=  $lookup($aspects, $id);
                          {
                            "id": $id,
                            "level": $pad("", $i + 1, "*"),
                            "title": $aspect ? $aspect.title : $id
                          }
                        );
                      )});
                      $set("rpev-id", id);
                      $result 
                    );
                  )  
            blank:
              type: markdown
              template: >     # Шаблон представления дерева аспектов
                # Карточка аспекта
    # Документы
    docs2:
        title: Документы        # Название сущности. Обязательно.
        description: Документы  # Описание сущности текст или ссылка на документ. Необязательно.
        menu: >                 # Генератор раcположения в меню. Запрос или явное описание объета. Необязательно.
            (
                [$.docs.$spread().{
                    "icon": *.icon,                 /* Получаем иконку */
                    "link": "/docs/" & $keys()[0],  /* Формируем ссылку на документ */
                    "location": *.location          /* Формируем расположение в меню */
                }][location]
            )
        presentations:          # Представления объектов сущности. Обязательно.
            general: >          # Основное представление. JSONata запрос или объект. Обязательно.
                (
                    $this   /* В $this объект. Вовращаем все поля документа как есть. */
                )
        schema:                 # JSON Schema контролирующая описание объекта сущности
            type: object
            patternProperties:
                "[a-zA-Z0-9_]*(\\.[a-zA-Z0-9_]*)*$": # Шаблон ключа
                    type: object
                    properties:
                        icon:
                            title: Иконка документа
                            type: string
                            minLength: 3
                        location:
                            title: Расположение документа в меню
                            type: string
                            minLength: 1
                        description:
                            title: Описание документа
                            type: string
                            minLength: 1
                        type:
                            title: Тип документа
                            type: string
                            enum: 
                                - OpenAPI
                                - AsyncAPI
                                - Markdown
                                - Table
                                - PlantUML
                        subjects:
                            title: К каким объектам относится документ
                            type: array
                            minItems: 1
                            items:
                                type: string
                                minLength: 1
                        source:
                            title: Источник (JSON запрос или источник данных для шаблона / Ссылка на файл)
                            type: string
                            minLength: 1
                        origin:
                            title: Исходные данные для запроса в source (JSON запрос или источник данных)
                            type: string
                            minLength: 1
                        template:
                            title: Шаблон (текст или ссылка на файл)
                            type: string
                            minLength: 1
                    required:
                        - type
